program := declaration* EOF

declaration := structDeclaration
             | funcDeclaration
             | varDeclaration
             | statement

decoratedIdentifier := modifier? IDENTIFIER ": " TYPE

structDeclaration := modifier? "struct" IDENTIFIER "{" parameters "};"
funcDeclaration := modifier? "func" IDENTIFIER "(" parameters? ")" block
varDeclaration := decoratedIdentifier ( "=" expression )? ";"
parameters := decoratedIdentifier ( "," decoratedIdentifier )*

arguments := expression ( "," expression )*

statement := exprStatement
           | ifElseStatement
           | whileStatement
           | forStatement
           | switchStatement
           | caseStatement
           | returnStatement
           | block

block := "{" declaration* "}"

exprStatement := expression ";"
ifElseStatement := "if" "(" expression ")" statement ("else" statement)?
whileStatement := "while" "(" expression ")" statement
forStatement := "for" "(" statement expression ";" expression ")" statement
switchStatement := "switch" "(" expression ")" statement
caseStatement := "case" expression ":" statement
returnStatement := "return" expression? ";"
