program := declaration* EOF

declaration := structDeclaration
             | funcDeclaration
             | varDeclaration
             | statement

decoratedIdentifier := modifier? IDENTIFIER ": " TYPE

structDeclaration := modifier? "struct" IDENTIFIER "{" parameters "};"
funcDeclaration := modifier? "func" IDENTIFIER "(" parameters? ")" block
varDeclaration := decoratedIdentifier ( "=" expression )? ";"
parameters := decoratedIdentifier ( "," decoratedIdentifier )*

arguments := (expression ( "," expression )*)?

statement := exprStatement
           | ifElseStatement
           | whileStatement
           | forStatement
           | switchStatement
           | caseStatement
           | returnStatement
           | block

block := "{" declaration* "}"

exprStatement := expression ";"
ifElseStatement := "if" "(" expression ")" statement ( "else" statement )?
whileStatement := "while" "(" expression ")" statement
forStatement := "for" "(" statement expression ";" expression ")" statement
switchStatement := "switch" "(" expression ")" statement
caseStatement := "case" expression ":" statement
returnStatement := "return" expression? ";"

expression := assignment
assignment := logicOr ( "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "^=" | "|=" logicOr )*
logicOr := ( logicAnd "||" )* logicAnd
logicAnd := ( bitwiseOr "&&" )* bitwiseOr
bitwiseOr := ( bitwiseXor "|" )* bitwiseXor
bitwiseXor := ( bitwiseAnd "^" )* bitwiseAnd
bitwiseAnd := ( equality "&" )* equality
equality := ( comparison ( "==" | "!=" ) )* comparison
comparison := ( shift ( ">" | ">=" | "<" | "<=" ) )* shift
shift := ( term ( "<<" | ">>" ) )* term
term := ( factor ( "+" | "-" ) )* factor
factor := ( prefix ( "*" | "/" | "%" ) )* prefix
prefix := ( "++" | "--" | "+" | "-" | "!" | "~" | "*" | "&" )* postfix
postfix := primary ( "++" | "--" | "(" arguments ")" | "[" arguments "]" | "." IDENTIFIER | "->" IDENTIFIER )*
primary := "true" | "false" | "undefined" | NUMBER | STRING | IDENTIFIER | "(" expression ")" | "{" arguments "}"

NUMBER := DIGIT+ ( "." DIGIT+ )?
STRING := "\"" ANY* "\""
IDENTIFIER := ALPHA ( ALPHA | DIGIT )*
ALPHA := "a" ... "z" | "A" ... "Z" | "_"
DIGIT := "0" ... "9"
